/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)
    alias(libs.plugins.serialization)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.coroutines.core)

    // Use the Kotlin JUnit 5 integration.
    testImplementation(kotlin("test"))
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


/* Download and bundle ranges */

tasks.register<JavaExec>("downloadRanges") {
    description = "Downloads ISBN ranges to include with the distribution"
    group = "build"

    // Configure the task's properties
    classpath = sourceSets.main.get().runtimeClasspath
    mainClass.set("dev.rlqd.isbn.ranges.build.DownloadRangesKt")
}

tasks.jar {
    dependsOn("downloadRanges")

    from("build/external/isbn-ranges.json") {
        into("dev/rlqd/isbn/ranges")
    }

    // Exclude the download script
    exclude("dev/rlqd/isbn/ranges/build")
}


/* Test output jar */

sourceSets {
    create("testJar") {
        java.srcDir("src/test-jar/kotlin")
        resources.srcDir("src/test-jar/resources")
        compileClasspath += sourceSets.main.get().output
    }
}

configurations {
    getByName("testJarImplementation") {
        extendsFrom(testImplementation.get())
    }
    getByName("testJarRuntimeOnly") {
        extendsFrom(testRuntimeOnly.get())
    }
}

tasks.register<Test>("testJar") {
    description = "Runs tests against the output JAR"
    group = "verification"

    // Ensure the JAR is built first
    dependsOn(tasks.jar)

    useJUnitPlatform()

    val jarTestSrc = sourceSets.named("testJar").get()
    testClassesDirs = jarTestSrc.output.classesDirs
    classpath = jarTestSrc.runtimeClasspath + files(tasks.jar.get().archiveFile)
}

tasks.build {
    // Add jar test as a build step
    dependsOn("testJar")
}
